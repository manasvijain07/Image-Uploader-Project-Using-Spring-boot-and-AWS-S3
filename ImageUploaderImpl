package services.impl;

import java.io.IOException;
import java.net.URL;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.amazonaws.HttpMethod;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.GeneratePresignedUrlRequest;
import com.amazonaws.services.s3.model.ListObjectsV2Request;
import com.amazonaws.services.s3.model.ListObjectsV2Result;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.PutObjectResult;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectSummary;

import exceptions.ImageUploaderException;
import services.ImageUploader;

@Service
public class ImageUploaderImpl implements ImageUploader{
	
	@Autowired
	private AmazonS3 client;
	
	@Value("${app.s3.bucket}")
	private String bucketName;

	// uploadImage() -> we get file name and encrypt it by generating random id and the calling 
	// client's putObject() to upload image and will return our preSignedURL
	@Override
	public String uploadImage(MultipartFile image) {
		
		if(image == null)
		{
			throw new ImageUploaderException("Image is not there");
		}
		
		//eg - actualFileName = abc.png
		String actualFileName = image.getOriginalFilename();
		
		//fileName = <random-uuid> + .png
		String fileName = UUID.randomUUID().toString() 
				+ actualFileName.substring(actualFileName.lastIndexOf("."));
		
		ObjectMetadata metadata = new ObjectMetadata();
		metadata.setContentLength(image.getSize());
		
		try {
			PutObjectResult putObjectResult = client.putObject(new PutObjectRequest(bucketName, fileName, image.getInputStream(), metadata));
			return this.preSignedURL(fileName);
		} catch (IOException e) {
			throw new ImageUploaderException("error in uploading image" + e.getMessage());
		}
	}

	@Override
	public List<String> allFiles() {
		// TODO Auto-generated method stub
		
		ListObjectsV2Request listObjectsV2Request = new ListObjectsV2Request()
				.withBucketName(bucketName);
		
		ListObjectsV2Result listObjectsV2Result = client.listObjectsV2(listObjectsV2Request);
		List<S3ObjectSummary> objectSummaries = listObjectsV2Result.getObjectSummaries();
		List<String> listFileUrls = objectSummaries.stream().map(item -> this.preSignedURL(item.getKey())).collect(Collectors.toList());
		return listFileUrls;
	}

	// A presigned URL is generated by an AWS user who has access to the object. 
	// The generated URL is then given to the unauthorized user.
	// we will generate presigned URL using GeneratePreSignedUrlRequest and passing it to client's generatePresignedUrl()
	@Override
	public String preSignedURL(String fileName) {
		// TODO Auto-generated method stub
		Date expirationDate = new Date();
		long time = expirationDate.getTime();
		int hour = 2;
		time += hour * 60 * 60 * 1000;
		expirationDate.setTime(time);
		
		GeneratePresignedUrlRequest generatePresignedUrlRequest = new GeneratePresignedUrlRequest(bucketName, fileName)
				.withMethod(HttpMethod.GET)
				.withExpiration(expirationDate);
				
		URL url = client.generatePresignedUrl(generatePresignedUrlRequest);
		return url.toString();
	}
	
	@Override
	public String getImageURLbyName(String fileName)
	{
		S3Object object = client.getObject(bucketName, fileName);
		String key = object.getKey();
		String url = preSignedURL(key);
		return url;
		
	}


}
